name: Tests

on:
  push:
    branches: [main]
  pull_request:

concurrency:
  group: tests-${{ github.ref }}
  cancel-in-progress: true

jobs:
  run-tests:
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: ["ubuntu-latest", "macos-latest", "windows-latest"]
        python-version: ["3.7", "3.10"]
        include:
          - os: "windows-latest"
            python-version: "3.8"
          - os: "macos-latest"
            python-version: "3.9"
          - os: "ubuntu-latest"
            python-version: "3.10"
      fail-fast: false
    steps:
      - name: Check out repository code
        uses: actions/checkout@v2
      - name: Run base setup actions
        uses: jupyterlab/maintainer-tools/.github/actions/base-setup@v1
      - uses: conda-incubator/setup-miniconda@v2
        with:
          mamba-version: "*"
          channels: conda-forge
      - name: Install conda-forge python
        shell: bash -l {0}
        run: |
          mamba create -n nbconvert
          conda activate nbconvert
          mamba install python=${{ matrix.python-version }}
      - name: Install conda-forge dependencies
        shell: bash -l {0}
        run: |
          mamba create -n nbconvert
          conda activate nbconvert
          mamba install pip pyqtwebengine pandoc pyxdg
      - name: Install Linux dependencies
        if: startsWith(runner.os, 'Linux')
        run: |
          sudo apt-get update
          sudo apt-get install texlive-plain-generic inkscape texlive-xetex
          sudo apt-get install xvfb x11-utils libxkbcommon-x11-0
      - name: Install package dependencies
        shell: bash -l {0}
        run: |
          conda activate nbconvert
          pip install codecov
          pip install -e ".[execute,serve,test]"
          which python
          python -m ipykernel.kernelspec --sys-prefix

      - name: List installed packages
        shell: bash -l {0}
        run: |
          conda activate nbconvert
          pip freeze
          pip check

      - name: Run tests with coverage
        if: ${{ startsWith(runner.os, 'macos')  }}
        shell: bash -l {0}
        run: |
          conda activate nbconvert
          # See https://github.com/pyppeteer/pyppeteer/pull/321
          pip install -U websockets
          python -m pytest --cov nbconvert -vv

      - name: Run tests on pypy and Windows
        if: ${{ startsWith(runner.os, 'linux') }}
        shell: bash -l {0}
        run: |
          conda activate nbconvert
          # See https://github.com/pyppeteer/pyppeteer/pull/321
          pip install -U websockets
          #python -m pytest -vv
          xvfb-run --auto-servernum `which coverage` run -m pytest -vv

      - name: Run tests on pypy and Windows
        if: ${{ startsWith(runner.os, 'Windows') }}
        shell: bash -l {0}
        run: |
          conda activate nbconvert
          # See https://github.com/pyppeteer/pyppeteer/pull/321
          pip install -U websockets
          python -m pytest -vv

      - name: Code coverage
        shell: bash -l {0}
        run: |
          conda activate nbconvert
          codecov

  # Run "pre-commit run --all-files --hook-stage=manual"
  pre-commit:
    runs-on: ubuntu-20.04
    timeout-minutes: 5
    steps:
      - uses: actions/checkout@v2
      - uses: jupyterlab/maintainer-tools/.github/actions/base-setup@v1
      - uses: pre-commit/action@v2.0.0
        with:
          extra_args: --all-files --hook-stage=manual
      - name: Help message if pre-commit fail
        if: ${{ failure() }}
        run: |
          echo "You can install pre-commit hooks to automatically run formatting"
          echo "on each commit with:"
          echo "    pre-commit install"
          echo "or you can run by hand on staged files with"
          echo "    pre-commit run"
          echo "or after-the-fact on already committed files with"
          echo "    pre-commit run --all-files --hook-stage=manual"

  test_minimum_versions:
    name: Test Minimum Versions
    timeout-minutes: 20
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
      - name: Base Setup
        uses: jupyterlab/maintainer-tools/.github/actions/base-setup@v1
        with:
          python_version: "3.7"
      - name: Install miniumum versions
        uses: jupyterlab/maintainer-tools/.github/actions/install-minimums@v1
      - name: Run the unit tests
        run: |
          pytest -vv -W default || pytest -vv -W default --lf

  test_prereleases:
    name: Test Prereleases
    runs-on: ubuntu-latest
    timeout-minutes: 20
    steps:
      - name: Checkout
        uses: actions/checkout@v2
      - name: Base Setup
        uses: jupyterlab/maintainer-tools/.github/actions/base-setup@v1
      - name: Install the Python dependencies
        run: |
          pip install --pre -e ".[test]"
      - name: List installed packages
        run: |
          pip freeze
          pip check
      - name: Run the tests
        run: |
          pytest -vv || pytest -vv --lf

  make_sdist:
    name: Make SDist
    runs-on: ubuntu-latest
    timeout-minutes: 10
    steps:
      - uses: actions/checkout@v2
      - uses: jupyterlab/maintainer-tools/.github/actions/base-setup@v1
      - uses: jupyterlab/maintainer-tools/.github/actions/make-sdist@v1

  test_sdist:
    runs-on: ubuntu-latest
    needs: [make_sdist]
    name: Install from SDist and Test
    timeout-minutes: 20
    steps:
      - uses: jupyterlab/maintainer-tools/.github/actions/base-setup@v1
      - uses: jupyterlab/maintainer-tools/.github/actions/test-sdist@v1
